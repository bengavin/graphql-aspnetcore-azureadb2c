# All parameters are required
parameters:
  - name: serviceConnection
    type: string
  - name: environment
    type: string

jobs:
- job: DeployEnvironmentJob
  displayName: Deploy ${{ parameters.environment }} environment
  steps:
  - task: AzureCLI@2
    displayName: Deploy Bicep template
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: 'infrastructure'
      addSpnToEnvironment: true
      inlineScript: |
        echo "Check for Key Vault existence"
        resourceGroupName=rg-$(Deployment.Environment)-$(Deployment.Application)
        vaultName=kv-$(Deployment.Environment)-$(Deployment.Application)
        echo "Executing: az keyvault list --resource-group $resourceGroupName --query '[].name' --output tsv | grep $vaultName"
        vaultNames=`az keyvault list --resource-group $resourceGroupName --query '[].name' --output tsv | grep $vaultName`
        echo "Found Key Vault: $vaultNames == $vaultName"

        secretNames='[]'
        if [ "$vaultNames" != "" ]; then
          echo "Ensure secret list permissions"
          az keyvault set-policy --name $vaultName --secret-permissions list --spn $servicePrincipalId

          echo "Retrieving Existing Key Vault Secret Name(s)"
          secretNames=`az keyvault secret list --vault-name $vaultName --query '[].name' --output json`
        fi
        echo "Key Vault Secret Name(s): $secretNames"

        echo "Deploying Bicep Template..."
        echo "az deployment sub create --name playbook-$(Deployment.Environment)-$(Deployment.Application) --location $(Deployment.Metadata.Location) --template-file playbook.bicep --parameters vars/playbook.parameters.json vars/playbook.parameters.$(Deployment.Environment).json existingKeyVaultSecrets=\"$secretNames\""
        outputs=`az deployment sub create --name playbook-$(Deployment.Environment)-$(Deployment.Application) --location $(Deployment.Metadata.Location) --template-file playbook.bicep --parameters vars/playbook.parameters.json vars/playbook.parameters.$(Deployment.Environment).json existingKeyVaultSecrets="$secretNames"`
        echo $outputs

        echo "Capturing outputs..."
        echo $outputs | jq -c '.properties.outputs | to_entries[] | [.key, .value.value]' | 
          while IFS=$"\n" read -r c; do
            outputname=$(echo "$c" | jq -r '.[0]')
            outputvalue=$(echo "$c" | jq -r '.[1]')
            echo "##vso[task.setvariable variable=Deployment.Output.$outputname;isOutput=true]$outputvalue"
          done

- job: BuildWebJob
  displayName: Build Web (${{ parameters.environment }})
  steps:
  - task: CmdLine@2
    displayName: 'Restore Web Packages'
    inputs:
      workingDirectory: 'web'
      script: |
        echo "Restoring NPM packages..."
        npm install

  - task: CmdLine@2
    displayName: 'Snowpack Build'
    env:
      SNOWPACK_PUBLIC_API_BASE_URL: '$(GraphiQL.BaseUri)/graphql'
      SNOWPACK_PUBLIC_ENV: '${{ upper(parameters.environment) }}'
      SNOWPACK_PUBLIC_B2C_CLIENT_ID: '$(Snowpack.B2C.ClientId)'
      SNOWPACK_PUBLIC_B2C_AUTHORITY: '$(Snowpack.B2C.Authority)'
      SNOWPACK_PUBLIC_B2C_REDIRECT_URI: 'https://$(Deployment.Output.webAppName).azurewebsites.net/blank.html'
      SNOWPACK_PUBLIC_B2C_KNOWN_AUTHORITIES: '$(Snowpack.B2C.KnownAuthorities)'
      SNOWPACK_PUBLIC_B2C_REQUEST_SCOPES: '$(Snowpack.B2C.RequestScopes)'
    inputs:
      workingDirectory: 'web'
      script: |
        echo "Building for Deployment..."
        npx snowpack build

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'web/wwwroot'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/web.zip'
      replaceExistingArchive: true

  - task: PublishPipelineArtifact@1
    displayName: Publish Web package to pipeline
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/web.zip'
      artifact: 'WebPackage'
      publishLocation: 'pipeline'

- job: DeployApiJob
  displayName: Deploy API (${{ parameters.environment }})
  dependsOn: DeployEnvironmentJob
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: Download API Package
    inputs:
      buildType: 'current'
      artifactName: ApiPackage
      targetPath: '$(System.ArtifactsDirectory)'

  - task: FileTransform@1      
    displayName: Update settings file(s)
    inputs:
      folderPath: '$(System.ArtifactsDirectory)/api.zip'
      fileType: 'json'
      targetFiles: 'appsettings.json'

  - task: AzureRmWebAppDeployment@4
    displayName: Publish API Package
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: ${{ parameters.serviceConnection }}
      appType: 'webAppLinux'
      WebAppName: '$(Deployment.Output.apiAppName)'
      packageForLinux: '$(System.ArtifactsDirectory)/api.zip'

- job: DeployWebJob
  displayName: Deploy Web (${{ parameters.environment }})
  dependsOn: DeployEnvironmentJob
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: Download Web Package
    inputs:
      buildType: 'current'
      artifactName: WebPackage
      targetPath: '$(System.ArtifactsDirectory)'

  - task: AzureRmWebAppDeployment@4
    displayName: Publish Web Package
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: ${{ parameters.serviceConnection }}
      appType: 'webAppLinux'
      WebAppName: '$(Deployment.Output.webAppName)'
      packageForLinux: '$(System.ArtifactsDirectory)/web.zip'
