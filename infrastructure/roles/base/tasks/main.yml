---
# tasks file for base
- debug:
    msg: The environment is - {{ stage }}
    verbosity: 2

- debug:
    msg: The tags are - {{ default_tags }}
    verbosity: 2

- name: Create resource group
  azure_rm_resourcegroup:
    name: "{{ resource_group['name'] }}"
    location: "{{ resource_group['region'] }}"
    auth_source: "{{ auth_source }}"
    tags: "{{ resource_group['tags'] }}"
    append_tags: false
  register: rg

- debug:
    var: rg
    verbosity: 2

- name: Create log analytics workspace
  azure_rm_loganalyticsworkspace:
    name: "{{ log_analytics['name'] }}"
    sku: "{{ log_analytics['tier'] }}"
    location: "{{ log_analytics['region'] }}"
    resource_group: "{{ resource_group['name'] }}"
    auth_source: "{{ auth_source }}"
    tags: "{{ log_analytics['tags'] }}"
    append_tags: false
  register: logws

- debug:
    var: logws
    verbosity: 2

# Currently Application Insights isn't supported directly by
# the azcollection library, so using an ARM template for this
- name: Create Application Insights Instance
  azure_rm_deployment:
    name: ansible-armdeploy-{{ app_insights['name'] }}
    deployment_mode: incremental
    wait_for_deployment_completion: yes
    wait_for_deployment_polling_period: 10
    template: "{{ lookup('file', 'files/application_insights.template.json') }}"
    parameters:
      type:
        value: "{{ app_insights['type'] }}"
      name:
        value: "{{ app_insights['name'] }}"
      regionId:
        value: "{{ app_insights['region'] }}"
      tagsArray:
        value: "{{ app_insights['tags'] }}"
      workspaceResourceId:
        value: "{{ logws['id'] }}"
      requestSource:
        value: "IbizaAIExtension"
    location: "{{ app_insights['region'] }}"
    resource_group: "{{ resource_group['name'] }}"
    auth_source: "{{ auth_source }}"
    tags: "{{ app_insights['tags'] }}"
    append_tags: no
    state: present
  register: appi

- debug:
    var: appi
    verbosity: 2

# Storage is used for the Serverless Function Apps
- name: Create Storage Account
  azure_rm_storageaccount:
    name: "{{ storage_account['name'] }}"
    location: "{{ storage_account['region'] }}"
    account_type: "{{ storage_account['account_type'] }}"
    allow_blob_public_access: no
    minimum_tls_version: TLS1_2
    resource_group: "{{ resource_group['name'] }}"
    auth_source: "{{ auth_source }}"
    tags: "{{ storage_account['tags'] }}"
    append_tags: no
    state: present
  register: storage

- debug:
    var: storage
    verbosity: 2

# KeyVault is used for certificate and secret storage
- name: Create Key Vault
  azure_rm_keyvault:
    vault_name: "{{ key_vault['name'] }}"
    vault_tenant: "{{ key_vault['tenant'] }}"
    location: "{{ key_vault['region'] }}"
    sku:
      name: "{{ key_vault['tier'] }}"
    access_policies:
      - object_id: "{{ key_vault['owner'] }}"
        tenant_id: "{{ key_vault['tenant'] }}"
        keys:
          - get
          - list
        certificates:
          - get
          - list
        secrets:
          - get
          - list
    resource_group: "{{ resource_group['name'] }}"
    auth_source: "{{ auth_source }}"
    tags: "{{ key_vault['tags'] }}"
    append_tags: no
    state: present
  register: vault

- debug:
    var: vault
    verbosity: 2

- name: Create App Service Plan
  azure_rm_appserviceplan:
    name: "{{ app_service_plan['name'] }}"
    is_linux: "{{ app_service_plan['os'] == 'Linux' }}"
    sku: "{{ app_service_plan['sku'] }}"
    number_of_workers: "{{ app_service_plan['workers'] }}"
    location: "{{ app_service_plan['region'] }}"
    resource_group: "{{ resource_group['name'] }}"
    auth_source: "{{ auth_source }}"
    tags: "{{ app_service_plan['tags'] }}"
    append_tags: false
    state: present
  register: plan

- debug:
    var: plan
    verbosity: 2
